// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package saml20.actions;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import org.w3c.dom.*;
import org.xml.sax.SAXException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.*;

public class PreValidateIdPFile extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __IdPFile;
	private saml20.proxies.IdPMetadata IdPFile;

	public PreValidateIdPFile(IContext context, IMendixObject IdPFile)
	{
		super(context);
		this.__IdPFile = IdPFile;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.IdPFile = __IdPFile == null ? null : saml20.proxies.IdPMetadata.initialize(getContext(), __IdPFile);

		// BEGIN USER CODE

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

        factory.setNamespaceAware(true);
        DocumentBuilder builder = null;

        try {
            builder = factory.newDocumentBuilder();
        } catch (ParserConfigurationException e1) {
            Core.getLogger(this.toString()).info("Parser configuration exception while creating a new documentbuilder for the IdP metadata document: " + e1.getMessage());
            return false;
        }

        Document doc;
        try (InputStream idpFileStream = Core.getFileDocumentContent(getContext(), this.IdPFile.getMendixObject())) {
            doc = builder.parse(idpFileStream);
        } catch (SAXException e) {
            Core.getLogger(this.toString()).info("SAX exception while parsing the IdP metadata document: " + e.getMessage());
            return false;
        } catch (IOException e) {
            Core.getLogger(this.toString()).info("IO exception occurred while parsing the IdP metadata document: " + e.getMessage());
            return false;
        }

        Node firstElement = doc.getFirstChild();

        // 2015-10-12 BJHL: Comments may be placed before the first element.
        while (firstElement != null && firstElement.getNodeType() == Node.COMMENT_NODE) {
            firstElement = firstElement.getNextSibling();
        }

        if (firstElement == null)
            return false;

        if ("EntitiesDescriptor".equals(firstElement.getLocalName()))
            return true;
        else if ("EntityDescriptor".equals(firstElement.getLocalName())) {
            Element entitiesElement = doc.createElementNS(firstElement.getNamespaceURI(), "EntitiesDescriptor");
            NamedNodeMap attrs = firstElement.getAttributes();
            for (int i = 0; i < attrs.getLength(); i++) {
                Attr attr = (Attr) attrs.item(i);
                attr = (Attr) attr.cloneNode(true);

                entitiesElement.setAttributeNode(attr);
            }
            doc.removeChild(firstElement);
            doc.appendChild(entitiesElement);


            entitiesElement.appendChild(firstElement);

            File tmpFile = new File(Core.getConfiguration().getTempPath().getAbsolutePath() + "/TmpIdpFile.xml");
            while (tmpFile.exists())
                tmpFile = new File(Core.getConfiguration().getTempPath().getAbsolutePath() + "/TmpIdpFile_" + System.currentTimeMillis() + ".xml");
            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            // added getPath(), see https://stackoverflow.com/questions/15324008
            StreamResult output = new StreamResult(tmpFile.getPath());
            DOMSource input = new DOMSource(doc);

            transformer.transform(input, output);

            try (FileInputStream fis = new FileInputStream(tmpFile)) {
                Core.storeFileDocumentContent(getContext(), this.IdPFile.getMendixObject(), fis);
                tmpFile.delete();
            } catch (FileNotFoundException e) {
                Core.getLogger(this.toString()).info("File not found exception occurred while creating temp idp xml file: " + e.getMessage());
                return false;
            }
        } else
            throw new CoreException("Unsupported root node, only: EntitiesDescriptor and EntityDescriptor are expected but found: " + firstElement.getLocalName());

        return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "PreValidateIdPFile";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
