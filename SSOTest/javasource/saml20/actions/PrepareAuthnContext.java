// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package saml20.actions;

import java.util.ArrayList;
import java.util.List;
import saml20.proxies.SAMLAuthnContext;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

public class PrepareAuthnContext extends CustomJavaAction<java.lang.Boolean>
{
	public PrepareAuthnContext(IContext context)
	{
		super(context);
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		addAuthnContextOptions();
		
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "PrepareAuthnContext";
	}

	// BEGIN EXTRA CODE
	private void addAuthnContextOptions() throws CoreException {
		
		List<IMendixObject> result = Core.retrieveXPathQueryEscaped(getContext(), "//%s", SAMLAuthnContext.entityName);
		List<String> exisingContext = new ArrayList<String>();
		
		for( IMendixObject obj : result ) {
			exisingContext.add((String) obj.getValue(getContext(), SAMLAuthnContext.MemberNames.Description.toString()) );
		}
		
		
		createAuthnContext("Internet Protocol","urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol", exisingContext);
	
		createAuthnContext("InternetProtocolPassword","urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocolPassword", exisingContext);
		
		createAuthnContext("Kerberos","urn:oasis:names:tc:SAML:2.0:ac:classes:Kerberos", exisingContext);
		
		createAuthnContext("MobileOneFactorUnregistered","urn:oasis:names:tc:SAML:2.0:ac:classes:MobileOneFactorUnregistered", exisingContext);
		
		createAuthnContext("MobileTwoFactorUnregistered","urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorUnregistered", exisingContext);
		
		createAuthnContext("MobileOneFactorContract","urn:oasis:names:tc:SAML:2.0:ac:classes:MobileOneFactorContract", exisingContext);
		
		createAuthnContext("MobileTwoFactorContract","urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorContract", exisingContext);
		
		createAuthnContext("Password","urn:oasis:names:tc:SAML:2.0:ac:classes:Password", exisingContext);
		
		createAuthnContext("PasswordProtectedTransport","urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport", exisingContext);
		
		createAuthnContext("PreviousSession","urn:oasis:names:tc:SAML:2.0:ac:classes:PreviousSession", exisingContext);
		
		createAuthnContext("Public Key – X.509","urn:oasis:names:tc:SAML:2.0:ac:classes:X509", exisingContext);
		
		createAuthnContext("Public Key – PGP","urn:oasis:names:tc:SAML:2.0:ac:classes:PGP", exisingContext);
		
		createAuthnContext("Public Key – SPKI","urn:oasis:names:tc:SAML:2.0:ac:classes:SPKI", exisingContext);
		
		createAuthnContext("Public Key - XML Digital Signature","urn:oasis:names:tc:SAML:2.0:ac:classes:XMLDSig", exisingContext);
		
		createAuthnContext("Smartcard","urn:oasis:names:tc:SAML:2.0:ac:classes:Smartcard", exisingContext);
		
		createAuthnContext("SmartcardPKI","urn:oasis:names:tc:SAML:2.0:ac:classes:SmartcardPKI", exisingContext);
		
		createAuthnContext("SoftwarePKI","urn:oasis:names:tc:SAML:2.0:ac:classes:SoftwarePKI", exisingContext);
		
		createAuthnContext("Telephony","urn:oasis:names:tc:SAML:2.0:ac:classes:Telephony", exisingContext);
		
		createAuthnContext("Telephony (\"Nomadic\")","urn:oasis:names:tc:SAML:2.0:ac:classes:NomadTelephony", exisingContext);
		
		createAuthnContext("Telephony (Personalized)","urn:oasis:names:tc:SAML:2.0:ac:classes:PersonalTelephony", exisingContext);
		
		createAuthnContext("Telephony (Authenticated)","urn:oasis:names:tc:SAML:2.0:ac:classes:AuthenticatedTelephony", exisingContext);
		
		createAuthnContext("Secure Remote Password","urn:oasis:names:tc:SAML:2.0:ac:classes:SecureRemotePassword", exisingContext);
	
		createAuthnContext("SSL/TLS Certificate-Based Client Authentication","urn:oasis:names:tc:SAML:2.0:ac:classes:TLSClient", exisingContext);
	
		createAuthnContext("TimeSyncToken","urn:oasis:names:tc:SAML:2.0:ac:classes:TimeSyncToken", exisingContext);
	
		createAuthnContext("Unspecified","urn:oasis:names:tc:SAML:2.0:ac:classes:unspecified", exisingContext);
		
		createAuthnContext("Integrated Windows Authentication"," urn:federation:authentication:windows", exisingContext);
		
	}

	private void createAuthnContext(String descr,String value, List<String> existingContext) throws CoreException {
		
		if( !existingContext.contains(descr) ) { 
			SAMLAuthnContext authC = SAMLAuthnContext.initialize(this.getContext(), Core.instantiate(this.getContext(), SAMLAuthnContext.entityName));
			
			authC.setDescription(descr);
			authC.setValue(value);
			authC.commit();
		
		}
		
	}
	
	// END EXTRA CODE
}
