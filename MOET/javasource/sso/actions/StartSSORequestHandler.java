// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package sso.actions;

import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import com.mendix.core.Core;
import com.mendix.core.CoreRuntimeException;
import com.mendix.externalinterface.connector.RequestHandler;
import com.mendix.logging.ILogNode;
import com.mendix.m2ee.api.IMxRuntimeRequest;
import com.mendix.m2ee.api.IMxRuntimeResponse;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IDataType;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.ISession;
import com.mendix.systemwideinterfaces.core.IUser;
import com.mendix.webui.CustomJavaAction;
import sso.actions.custom.LoginHelper;
import system.proxies.User;

public class StartSSORequestHandler extends CustomJavaAction<java.lang.Boolean>
{
	public StartSSORequestHandler(IContext context)
	{
		super(context);
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		SSOLOGGER.info("Starting SSO Request Handler...");
		Core.addRequestHandler("SSO/", new SSOHandler());
		SSOLOGGER.info("Starting SSO Request Handler.....DONE");
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "StartSSORequestHandler";
	}

	// BEGIN EXTRA CODE
	protected static ILogNode SSOLOGGER = Core.getLogger("SSOHandler");
	
	class SSOHandler extends RequestHandler {
		

		@Override
		protected void processRequest(IMxRuntimeRequest request, IMxRuntimeResponse response, String path) throws Exception {
			HttpServletRequest httpRequest = request.getHttpServletRequest();
			String uri = httpRequest.getRequestURI();
			String redirectOriginal = uri.substring(21);
			String redirect = redirectOriginal.replaceAll("%3F","?");
			
			SSOLOGGER.info("Redirect url = " + redirect);
			SSOLOGGER.info(httpRequest.getRequestURI());
			
			//Make sure that the request is a GET
			if ("GET".equals(request.getHttpServletRequest().getMethod())) {
				//Try the actual logic
				try {
					Enumeration httpHeaders = httpRequest.getHeaderNames();
					while(httpHeaders.hasMoreElements()) {
						  String headerName = (String)httpHeaders.nextElement();
						  SSOLOGGER.info("" + headerName + " " + httpRequest.getHeader(headerName));
						  System.out.println("" + headerName + " " + httpRequest.getHeader(headerName));
						}
					
					/*
					 * Getting the CPC ID from the request
					 * 
					 * Get the iv-user-1 header then get index of cpcid=
					 * and index of the first comma then take substring
					 */
					String ivuserl = request.getHeader("iv-user-l");
					
					String username= request.getHeader("iv-user");
					int equalIndex = ivuserl.indexOf("cpcid=") + 6;
					int commaIndex = ivuserl.indexOf(",");
					String uniqueID = ivuserl.substring(equalIndex, commaIndex);
					String resolveInput = uniqueID + "," + username;
					SSOLOGGER.info("This is the info it passes to the microflow " + resolveInput);
					SSOLOGGER.info("redirectUri content " + redirect);
					
					//
					ISession requestSession = getSessionFromRequest(request);
					
					//create system context to run microflow to check for user
					IContext context = Core.createSystemContext();
					User user = null;
					
					user = resolveUser(context, resolveInput);
					if (user != null) {
						IUser iUser = Core.getUser(context, user.getName());
						
						if (requestSession == null) {
							// session is null and we need to make a new one for this person
							System.out.println("session from request is null");
							LoginHelper.createSession(request, response, context, iUser, null, redirect);
						} else {
							//session exists. Make sure it's for the same person. If not then we need to destroy the session
							IContext sessionContext = requestSession.createContext(IContext.ExecutionType.CLIENT);
							//Get the session IUser
							IUser requestUser = requestSession.getUser(sessionContext);
							String requestUserName = requestUser.getName();
							
							String iUserName = iUser.getName();
							if (iUserName == requestUserName) {
								System.out.println("They are the same");
								//if they are the same then we pass the session to this function so it will be maintained
								LoginHelper.createSession(request, response, context, iUser, requestSession, redirect);
							} else {
								System.out.println("They are not the same");
								//destroy the request session and create new session for the new user
								requestSession.destroy();
								//pass null to this function and it will create a new session
								LoginHelper.createSession(request, response, context, iUser, null, redirect);
							}
						
						}

					} else {
						SSOLOGGER.error("Unauthorized attempt");
						response.setStatus(500);
					}
				}
				//Set status to 500 on error
				catch (Exception e) {
					response.setStatus(500);
					System.out.println(e);
					SSOLOGGER.info(e.getMessage());
				}
			}
			//Set status to 500 if request is not a GET
			else {
				response.setStatus(500);
			}
			
		}
		
	}
	
	private User resolveUser(IContext context, String cpcID) {
		try {
			//Creating hashmap for inputs params of microflow used to resolve the user
			Map<String, Object> params = new HashMap<String, Object>();
			String actionName = "SSO.ResolveUser";
			Map<String, IDataType> inputParameters = Core.getInputParameters(actionName);
			for (String name : inputParameters.keySet()) {
				params.put(name, cpcID);
				break;
			}
		
			//This microflow should return the user - either one who already exists or the newly created user
			Object result = Core.execute(context, "SSO.ResolveUser", params);
			
			//If user is not found then return null else return the user
			if (result == null) {
				return null;
			} else {
				User user = User.initialize(context, (IMendixObject) result);
				SSOLOGGER.info("User " + user.getName() + " was resolved");
				return user;
			}
		} catch (Exception ex) {
			SSOLOGGER.error("Exception occurred while resolving user "+ ex);
			throw new CoreRuntimeException("Failed to resolve user");
		}
	}
	// END EXTRA CODE
}
